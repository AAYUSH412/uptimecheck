version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: uptimecheck
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Service
  api:
    build:
      context: .
      target: api
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/uptimecheck
      - JWT_SECRET=your-super-secret-jwt-key-here
      - NODE_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Hub Service
  hub:
    build:
      context: .
      target: hub
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/uptimecheck
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Validator Service
  validator:
    build:
      context: .
      target: validator
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/uptimecheck
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2

  # Frontend (for production deployment)
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://api:8080
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/uptimecheck
    depends_on:
      - api
    restart: unless-stopped

volumes:
  postgres_data:
