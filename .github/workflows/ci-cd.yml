name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Add permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read

env:
  BUN_VERSION: '1.2.18'
  NODE_VERSION: '18'

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Generate Prisma client
        run: |
          cd packages/db
          bun prisma generate
        
      - name: Lint frontend
        run: |
          cd apps/frontend
          bun run lint
        
      - name: Type check frontend
        run: |
          cd apps/frontend
          bun run check-types

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: uptimecheck_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Generate Prisma client
        run: |
          cd packages/db
          bun prisma generate
          
      - name: Setup test database
        run: |
          cd packages/db
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/uptimecheck_test"
          bun prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/uptimecheck_test
          
      - name: Run tests (if available)
        run: |
          # Only run tests if test script exists
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            bun test
          else
            echo "No tests found - skipping test step"
          fi
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/uptimecheck_test

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Generate Prisma client
        run: |
          cd packages/db
          bun prisma generate
        
      - name: Build applications
        run: bun run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/*/dist/
            apps/frontend/.next/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here

  docker-build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: api
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/uptimecheck-api:latest
            ${{ secrets.DOCKER_USERNAME }}/uptimecheck-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push Hub image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: hub
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/uptimecheck-hub:latest
            ${{ secrets.DOCKER_USERNAME }}/uptimecheck-hub:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push Validator image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: validator
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/uptimecheck-validator:latest
            ${{ secrets.DOCKER_USERNAME }}/uptimecheck-validator:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
